2 Ways to implement multithreading
1. Extend Thread class
2. Implement runnable interface (preferable, interface allows for multiple inheritance)

Creating a new thread (Thread class method)
1. Child class extends Thread class
2. Child class calls and overrides parent run method 
3. From the main method, a child object is created and then start method used 

Sleep method 
1. Can be used in any method 
2. Static Thread method called by using Thread.sleep(2000) -- if thread asleep for 2 seconds

Join method 
1. Allows for multiple threads to wait on each other for completing shared task (i.e. main
   methods gathers info from user, child method performs calculations, main method prints)
2. Child object is created then join method used

Calculate Time
1. System.currentTimeMillis() used to hold start and end times to measure time for a process


Thread identity 
1. Thread.currentThread() allows you to get and change information about current thread
	a. thread name
	b. thread priority - determines which thread gets executed first
	

Yield method 
1. Allows for other thread to execute before starting the current thread 

Interrupt method
1. Allows for other thread to stop the current thread 


Synchronization 
1. When multiple threads are accessing the same object simultaneously, they may corrupt 
   each others data (when performing addition, deletion and updating of the object)
2. Synchronization allows for the first thread interacting with the object to have a lock
   on the object until its work is done
3. Once a thread acquires a lock on an object, it will prevent other threads from accessing
   any and all synchronized methods on that object. Threads can still access non-synchronized
   methods even if the object is locked
4. Class level locks are static synchronized methods. When locked, other threads cannot access
   other static synchronized methods, but can still access:
   		a. static methods 
   		b. synchronized instance methods
   		c. instance methods
5. If you want to lock a few lines of code instead of the whole method, you can use synchronized
   blocks instead. Advantage is that it improves program performance time since other threads
   can execute parts of the method not locked in the synchronized block.

   
Daemon Thread
1. A thread that runs in the background 
2. Thread.currentThread().isDaemon() will tell you if a thread is a daemon thread
3. Thread.currentThread().setDaemon() will let you set a thread to be a daemon thread


Deadlock
1.Deadlock happens when you have multiple threads waiting on each other's resources
